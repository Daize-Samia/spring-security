# Représente mes actions GitHub (pipeline)
name: Build & Deploy Spring App

# Spécifie quand déclencher cette action
on:
  push:
    branches:
      - main

jobs:
  # Le nom que nous donnerons à notre job
  build-deploy:
    name: Construction et déploiement de Spring Boot
    # Définit la machine sur laquelle nous voulons exécuter cette action
    runs-on: ubuntu-latest
    steps:
      # L'étape "Checkout code" signifie que les actions GitHub copieront le code depuis GitHub (ou le dépôt) et le cloneront sur la machine d'exécution
      - name: Recuperer le code
        # Indique que nous voulons exécuter certaines actions
        uses: actions/checkout@v2

      - name: Configuration de JDK 17
        uses: actions/setup-java@v2
        with:
          #distribution: 'corretto'
          java-version: 17

      - name: Exécuter les tests unitaires
        run: mvn -B test --file pom.xml # Une seule commande

      - name: Construction de l'application
        run: |
          mvn clean 
          mvn -B package --file pom.xml

      - name: Construction de l'image Docker
        uses: docker/build-push-action@v2
        with:
          context: .
          dockerfile: Dockerfile
          push: false
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/spring-boot-pipeline:latest
        # Pousser l'image Docker vers Docker Hub

      - name: Connexion à Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Pousser vers Docker Hub
        uses: docker/build-push-action@v2
        with:
          context: .
          dockerfile: Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/spring-boot-pipeline:latest